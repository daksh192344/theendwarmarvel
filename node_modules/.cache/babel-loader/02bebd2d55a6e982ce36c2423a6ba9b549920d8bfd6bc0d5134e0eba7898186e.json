{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  player: {\n    id: '1',\n    name: 'Player',\n    coins: 1000,\n    diamonds: 100,\n    rank: 'Bronze',\n    experience: 0,\n    level: 1,\n    characters: [],\n    selectedCharacters: []\n  },\n  characters: [],\n  battleState: null\n};\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    updatePlayer: (state, action) => {\n      state.player = {\n        ...state.player,\n        ...action.payload\n      };\n    },\n    updateBattleState: (state, action) => {\n      state.battleState = action.payload;\n    },\n    updateCharacter: (state, action) => {\n      const index = state.characters.findIndex(c => c.id === action.payload.id);\n      if (index !== -1) {\n        state.characters[index] = action.payload;\n      }\n    },\n    selectCharacter: (state, action) => {\n      if (state.player.selectedCharacters.length < 3) {\n        state.player.selectedCharacters.push(action.payload);\n      }\n    },\n    unselectCharacter: (state, action) => {\n      state.player.selectedCharacters = state.player.selectedCharacters.filter(id => id !== action.payload);\n    }\n  }\n});\nexport const {\n  updatePlayer,\n  updateBattleState,\n  updateCharacter,\n  selectCharacter,\n  unselectCharacter\n} = gameSlice.actions;\nexport const store = configureStore({\n  reducer: {\n    game: gameSlice.reducer\n  }\n});","map":{"version":3,"names":["configureStore","createSlice","initialState","player","id","name","coins","diamonds","rank","experience","level","characters","selectedCharacters","battleState","gameSlice","reducers","updatePlayer","state","action","payload","updateBattleState","updateCharacter","index","findIndex","c","selectCharacter","length","push","unselectCharacter","filter","actions","store","reducer","game"],"sources":["/home/schoolpjs3/theendwarmarvel/src/store/index.ts"],"sourcesContent":["import { configureStore, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { GameState, Character, Player, BattleState } from '../types';\n\nconst initialState: GameState = {\n  player: {\n    id: '1',\n    name: 'Player',\n    coins: 1000,\n    diamonds: 100,\n    rank: 'Bronze',\n    experience: 0,\n    level: 1,\n    characters: [],\n    selectedCharacters: [],\n  },\n  characters: [],\n  battleState: null,\n};\n\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    updatePlayer: (state, action: PayloadAction<Partial<Player>>) => {\n      state.player = { ...state.player, ...action.payload };\n    },\n    updateBattleState: (state, action: PayloadAction<BattleState>) => {\n      state.battleState = action.payload;\n    },\n    updateCharacter: (state, action: PayloadAction<Character>) => {\n      const index = state.characters.findIndex(c => c.id === action.payload.id);\n      if (index !== -1) {\n        state.characters[index] = action.payload;\n      }\n    },\n    selectCharacter: (state, action: PayloadAction<string>) => {\n      if (state.player.selectedCharacters.length < 3) {\n        state.player.selectedCharacters.push(action.payload);\n      }\n    },\n    unselectCharacter: (state, action: PayloadAction<string>) => {\n      state.player.selectedCharacters = state.player.selectedCharacters.filter(\n        id => id !== action.payload\n      );\n    },\n  },\n});\n\nexport const {\n  updatePlayer,\n  updateBattleState,\n  updateCharacter,\n  selectCharacter,\n  unselectCharacter,\n} = gameSlice.actions;\n\nexport const store = configureStore({\n  reducer: {\n    game: gameSlice.reducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch; "],"mappings":"AAAA,SAASA,cAAc,EAAEC,WAAW,QAAuB,kBAAkB;AAG7E,MAAMC,YAAuB,GAAG;EAC9BC,MAAM,EAAE;IACNC,EAAE,EAAE,GAAG;IACPC,IAAI,EAAE,QAAQ;IACdC,KAAK,EAAE,IAAI;IACXC,QAAQ,EAAE,GAAG;IACbC,IAAI,EAAE,QAAQ;IACdC,UAAU,EAAE,CAAC;IACbC,KAAK,EAAE,CAAC;IACRC,UAAU,EAAE,EAAE;IACdC,kBAAkB,EAAE;EACtB,CAAC;EACDD,UAAU,EAAE,EAAE;EACdE,WAAW,EAAE;AACf,CAAC;AAED,MAAMC,SAAS,GAAGb,WAAW,CAAC;EAC5BI,IAAI,EAAE,MAAM;EACZH,YAAY;EACZa,QAAQ,EAAE;IACRC,YAAY,EAAEA,CAACC,KAAK,EAAEC,MAAsC,KAAK;MAC/DD,KAAK,CAACd,MAAM,GAAG;QAAE,GAAGc,KAAK,CAACd,MAAM;QAAE,GAAGe,MAAM,CAACC;MAAQ,CAAC;IACvD,CAAC;IACDC,iBAAiB,EAAEA,CAACH,KAAK,EAAEC,MAAkC,KAAK;MAChED,KAAK,CAACJ,WAAW,GAAGK,MAAM,CAACC,OAAO;IACpC,CAAC;IACDE,eAAe,EAAEA,CAACJ,KAAK,EAAEC,MAAgC,KAAK;MAC5D,MAAMI,KAAK,GAAGL,KAAK,CAACN,UAAU,CAACY,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACpB,EAAE,KAAKc,MAAM,CAACC,OAAO,CAACf,EAAE,CAAC;MACzE,IAAIkB,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBL,KAAK,CAACN,UAAU,CAACW,KAAK,CAAC,GAAGJ,MAAM,CAACC,OAAO;MAC1C;IACF,CAAC;IACDM,eAAe,EAAEA,CAACR,KAAK,EAAEC,MAA6B,KAAK;MACzD,IAAID,KAAK,CAACd,MAAM,CAACS,kBAAkB,CAACc,MAAM,GAAG,CAAC,EAAE;QAC9CT,KAAK,CAACd,MAAM,CAACS,kBAAkB,CAACe,IAAI,CAACT,MAAM,CAACC,OAAO,CAAC;MACtD;IACF,CAAC;IACDS,iBAAiB,EAAEA,CAACX,KAAK,EAAEC,MAA6B,KAAK;MAC3DD,KAAK,CAACd,MAAM,CAACS,kBAAkB,GAAGK,KAAK,CAACd,MAAM,CAACS,kBAAkB,CAACiB,MAAM,CACtEzB,EAAE,IAAIA,EAAE,KAAKc,MAAM,CAACC,OACtB,CAAC;IACH;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXH,YAAY;EACZI,iBAAiB;EACjBC,eAAe;EACfI,eAAe;EACfG;AACF,CAAC,GAAGd,SAAS,CAACgB,OAAO;AAErB,OAAO,MAAMC,KAAK,GAAG/B,cAAc,CAAC;EAClCgC,OAAO,EAAE;IACPC,IAAI,EAAEnB,SAAS,CAACkB;EAClB;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}