{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\nimport { characters } from '../data/characters';\nconst initialState = {\n  player: {\n    id: '1',\n    name: 'Player',\n    coins: 1000,\n    diamonds: 100,\n    rank: 'Bronze',\n    experience: 0,\n    level: 1,\n    characters: ['thor', 'captain-america', 'iron-man'],\n    selectedCharacters: []\n  },\n  characters: characters,\n  battleState: null\n};\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    updatePlayer: (state, action) => {\n      state.player = {\n        ...state.player,\n        ...action.payload\n      };\n    },\n    updateBattleState: (state, action) => {\n      state.battleState = action.payload;\n    },\n    updateCharacter: (state, action) => {\n      const index = state.characters.findIndex(c => c.id === action.payload.id);\n      if (index !== -1) {\n        state.characters[index] = action.payload;\n      }\n    },\n    selectCharacter: (state, action) => {\n      if (state.player.selectedCharacters.length < 3) {\n        state.player.selectedCharacters.push(action.payload);\n      }\n    },\n    unselectCharacter: (state, action) => {\n      state.player.selectedCharacters = state.player.selectedCharacters.filter(id => id !== action.payload);\n    },\n    gainExperience: (state, action) => {\n      state.player.experience += action.payload;\n      // Level up if enough experience\n      const nextLevelExp = state.player.level * 100;\n      if (state.player.experience >= nextLevelExp) {\n        state.player.level += 1;\n        state.player.experience -= nextLevelExp;\n        // Unlock characters based on new level\n        state.characters = state.characters.map(char => {\n          if (char.requiredLevel && char.requiredLevel <= state.player.level) {\n            return {\n              ...char,\n              isUnlocked: true\n            };\n          }\n          return char;\n        });\n      }\n    }\n  }\n});\nexport const {\n  updatePlayer,\n  updateBattleState,\n  updateCharacter,\n  selectCharacter,\n  unselectCharacter,\n  gainExperience\n} = gameSlice.actions;\nexport const store = configureStore({\n  reducer: {\n    game: gameSlice.reducer\n  }\n});","map":{"version":3,"names":["configureStore","createSlice","characters","initialState","player","id","name","coins","diamonds","rank","experience","level","selectedCharacters","battleState","gameSlice","reducers","updatePlayer","state","action","payload","updateBattleState","updateCharacter","index","findIndex","c","selectCharacter","length","push","unselectCharacter","filter","gainExperience","nextLevelExp","map","char","requiredLevel","isUnlocked","actions","store","reducer","game"],"sources":["/home/schoolpjs3/theendwarmarvel/src/store/index.ts"],"sourcesContent":["import { configureStore, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { GameState, Character, Player, BattleState } from '../types';\nimport { characters } from '../data/characters';\n\nconst initialState: GameState = {\n  player: {\n    id: '1',\n    name: 'Player',\n    coins: 1000,\n    diamonds: 100,\n    rank: 'Bronze',\n    experience: 0,\n    level: 1,\n    characters: ['thor', 'captain-america', 'iron-man'],\n    selectedCharacters: [],\n  },\n  characters: characters,\n  battleState: null,\n};\n\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    updatePlayer: (state, action: PayloadAction<Partial<Player>>) => {\n      state.player = { ...state.player, ...action.payload };\n    },\n    updateBattleState: (state, action: PayloadAction<BattleState>) => {\n      state.battleState = action.payload;\n    },\n    updateCharacter: (state, action: PayloadAction<Character>) => {\n      const index = state.characters.findIndex(c => c.id === action.payload.id);\n      if (index !== -1) {\n        state.characters[index] = action.payload;\n      }\n    },\n    selectCharacter: (state, action: PayloadAction<string>) => {\n      if (state.player.selectedCharacters.length < 3) {\n        state.player.selectedCharacters.push(action.payload);\n      }\n    },\n    unselectCharacter: (state, action: PayloadAction<string>) => {\n      state.player.selectedCharacters = state.player.selectedCharacters.filter(\n        id => id !== action.payload\n      );\n    },\n    gainExperience: (state, action: PayloadAction<number>) => {\n      state.player.experience += action.payload;\n      // Level up if enough experience\n      const nextLevelExp = state.player.level * 100;\n      if (state.player.experience >= nextLevelExp) {\n        state.player.level += 1;\n        state.player.experience -= nextLevelExp;\n        // Unlock characters based on new level\n        state.characters = state.characters.map(char => {\n          if (char.requiredLevel && char.requiredLevel <= state.player.level) {\n            return { ...char, isUnlocked: true };\n          }\n          return char;\n        });\n      }\n    },\n  },\n});\n\nexport const {\n  updatePlayer,\n  updateBattleState,\n  updateCharacter,\n  selectCharacter,\n  unselectCharacter,\n  gainExperience,\n} = gameSlice.actions;\n\nexport const store = configureStore({\n  reducer: {\n    game: gameSlice.reducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}